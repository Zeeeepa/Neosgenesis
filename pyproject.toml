[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "neogenesis-langchain"
version = "1.0.0"
description = "Neogenesis System integration with LangChain - Advanced decision-making and state management"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Neogenesis System Team", email = "neogenesis@example.com"}
]
maintainers = [
    {name = "Neogenesis System Team", email = "neogenesis@example.com"}
]
keywords = [
    "langchain", 
    "decision-making", 
    "multi-armed-bandit", 
    "state-management",
    "ai-agents",
    "machine-learning",
    "optimization"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
requires-python = ">=3.8"
dependencies = [
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
    "pydantic>=2.0.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "typing-extensions>=4.0.0",
    "dataclasses-json>=0.5.0",
]

[project.optional-dependencies]
# 存储后端依赖
redis = ["redis>=4.0.0"]
lmdb = ["lmdb>=1.3.0"]
mongodb = ["pymongo>=4.0.0"]

# 性能优化依赖  
performance = ["numba>=0.56.0", "scipy>=1.7.0"]

# 分布式计算依赖
distributed = ["dask>=2021.0.0", "ray>=1.0.0"]

# 机器学习依赖
ml = ["scikit-learn>=1.0.0", "torch>=1.9.0"]

# 开发依赖
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]

# 文档依赖
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autoapi>=2.0.0",
    "myst-parser>=0.18.0",
]

# 完整安装（包含所有可选依赖）
full = [
    "neogenesis-langchain[redis,lmdb,mongodb,performance,distributed,ml]"
]

[project.urls]
Homepage = "https://github.com/neogenesis/neogenesis-langchain"
Documentation = "https://neogenesis-langchain.readthedocs.io/"
Repository = "https://github.com/neogenesis/neogenesis-langchain.git"
Issues = "https://github.com/neogenesis/neogenesis-langchain/issues"
Changelog = "https://github.com/neogenesis/neogenesis-langchain/blob/main/CHANGELOG.md"

[project.scripts]
neogenesis-demo = "neogenesis_langchain.examples.usage_examples:main"

[tool.setuptools]
packages = ["neogenesis_langchain"]

[tool.setuptools.package-dir]
neogenesis_langchain = "neogenesis_langchain"

[tool.setuptools.package-data]
neogenesis_langchain = ["py.typed"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting  
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["neogenesis_langchain"]
known_third_party = ["langchain", "pydantic", "numpy", "pandas"]

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=neogenesis_langchain",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# mypy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "lmdb.*",
    "pymongo.*",
    "numba.*",
    "dask.*",
    "ray.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["neogenesis_langchain"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
